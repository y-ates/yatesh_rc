#### ─────────────────────────────
#### User config (edit these only)
#### ─────────────────────────────
# Base paths
: "${HOME_DIR:="$HOME"}"
: "${WORK_DIR:="$HOME_DIR/export"}"

# HTB project layout
: "${HTB_ROOT:="$WORK_DIR/HTB/Machines"}"
: "${HTB_HTTP_PORT:=8080}"

# VPN config
: "${EXPORT_DIR:="$HOME_DIR/export"}"
: "${OVPN_FILE:="$EXPORT_DIR/yakate.ovpn"}"

# Wordlists (override if yours live elsewhere)
: "${WORDLIST_DIR:=/usr/share/wordlists}"
: "${FFUF_DIR_WORDLIST:="$WORDLIST_DIR/dirb/big.txt"}"
: "${FFUF_VHOST_WORDLIST:="$WORDLIST_DIR/seclists/Discovery/DNS/subdomains-top1million-20000.txt"}"

# Nmap defaults
: "${NMAP_OUTDIR:=nmap}"
: "${NMAP_MIN_RATE:=400}"
: "${NMAP_MIN_PAR:=512}"

#### ─────────────────────────────
#### Helpers (don’t edit)
#### ─────────────────────────────
_check_dep() { command -v "$1" >/dev/null 2>&1 || { echo "[!] Missing dependency: $1" >&2; return 1; }; }

_clip_copy() {
  # Copy STDIN to clipboard on Linux/Wayland/macOS if available
  if command -v xclip >/dev/null 2>&1; then
    xclip -selection clipboard
  elif command -v wl-copy >/dev/null 2>&1; then
    wl-copy
  elif command -v pbcopy >/dev/null 2>&1; then
    pbcopy
  else
    cat  # fallback: just echo back
  fi
}

#### ─────────────────────────────
#### Aliases
#### ─────────────────────────────
alias ll='ls -alhF'

# copy command output directly to clipboard: usage: echo "txt" | c
alias c='_clip_copy'

#### ─────────────────────────────
#### Functions
#### ─────────────────────────────

# start http server: server <PORT> [DIR]
server() {
  local port="${1:-8000}"
  local dir="${2:-.}"
  _check_dep python3 || return 1
  python3 -m http.server "$port" --directory "$dir"
}

# generate reverse shell: rs <IP> <PORT>  (redirect to file if you like)
rs() {
  if [ $# -ne 2 ]; then
    echo "Usage: rs <IP> <PORT>" >&2
    return 1
  fi
  _check_dep curl || return 1
  curl -fsS "https://reverse-shell.sh/$1:$2"
}

# connect to HTB VPN using your .ovpn
con-htb() {
  _check_dep sudo || return 1
  _check_dep openvpn || return 1
  if [ ! -f "$OVPN_FILE" ]; then
    echo "[!] OVPN not found: $OVPN_FILE" >&2
    return 1
  fi
  sudo openvpn "$OVPN_FILE"
}

# initialize HTB machine working dirs and start a simple HTTP share
# Usage: htb-init <MachineName>
htb-init() {
  if [ -z "$1" ]; then
    echo "Usage: htb-init <MachineName>" >&2
    return 1
  fi
  local m="$1"
  local base="$HTB_ROOT/$m"
  mkdir -p "$base/files" "$base/exploits" "$base/share"
  pushd "$base/share" >/dev/null || return 1
  _check_dep python3 || { popd >/dev/null; return 1; }
  # start server in background and store PID
  nohup python3 -m http.server "$HTB_HTTP_PORT" >/dev/null 2>&1 &
  echo $! > "$base/.server.pid"
  popd >/dev/null || true
  cd "$base" || true
  clear
  echo "[+] HTB workspace ready at: $base"
  echo "[+] HTTP share: http://127.0.0.1:$HTB_HTTP_PORT/ (PID $(cat "$base/.server.pid"))"
}

# Kill the per-machine HTTP server (if started by htb-init)
# Usage: htb-stop <MachineName>
htb-stop() {
  if [ -z "$1" ]; then
    echo "Usage: htb-stop <MachineName>" >&2
    return 1
  fi
  local pidfile="$HTB_ROOT/$1/.server.pid"
  if [ -f "$pidfile" ]; then
    kill "$(cat "$pidfile")" 2>/dev/null && rm -f "$pidfile" && echo "[+] Stopped server for $1" || echo "[!] Could not stop server"
  else
    echo "[i] No PID file at $pidfile"
  fi
}

# Full TCP nmap: nmap-full <IP/host>
nmap-full() {
  if [ -z "$1" ]; then
    echo "Usage: nmap-full <target>" >&2
    return 1
  fi
  _check_dep nmap || return 1
  mkdir -p "$NMAP_OUTDIR"
  nmap -p- -sC -sV -A --min-rate="$NMAP_MIN_RATE" --min-parallelism="$NMAP_MIN_PAR" -vv "$1" -oA "$NMAP_OUTDIR/${1}_tcp_full"
}

# UDP scan defaults: nmap_udp <target> [extra nmap args...]
nmap_udp() {
  if [ -z "$1" ]; then
    echo "Usage: nmap_udp <target> [options]" >&2
    return 1
  fi
  _check_dep nmap || return 1
  mkdir -p "$NMAP_OUTDIR"
  sudo nmap -sUCV -T4 --min-rate 10000 "$@" -v -oA "$NMAP_OUTDIR/udp_default"
}

# add ip/domain to /etc/hosts. Usage: addhost <IP> <DOMAIN>
addhost() {
  if [ "$#" -ne 2 ]; then
    echo "Usage: addhost <ip> <hostname>" >&2
    return 1
  fi
  local ip="$1" host="$2"
  if grep -q "^$ip" /etc/hosts; then
    sudo sed -i "/^$ip/s/\$/ $host/" /etc/hosts && echo "[+] Appended $host to $ip"
  else
    printf "%s %s\n" "$ip" "$host" | sudo tee -a /etc/hosts >/dev/null && echo "[+] Added $ip $host"
  fi
  grep "^$ip" /etc/hosts
}

# ffuf directory fuzz: ffuf-dir http://site.com/FUZZ [extra ffuf args...]
ffuf-dir() {
  _check_dep ffuf || return 1
  if [ -z "$1" ]; then
    echo "Usage: ffuf-dir <url-with-FUZZ> [extra ffuf args]" >&2
    return 1
  fi
  ffuf -u "$1" -w "$FFUF_DIR_WORDLIST" "${@:2}"
}

# ffuf vhost fuzz: ffuf-vhost domain.local [extra ffuf args...]
ffuf-vhost() {
  _check_dep ffuf || return 1
  if [ -z "$1" ]; then
    echo "Usage: ffuf-vhost <domain>" >&2
    return 1
  fi
  ffuf -H "Host: FUZZ.$1" -u "http://$1" -w "$FFUF_VHOST_WORDLIST" "${@:2}"
}

# Stabilize shell: st [1|2]
st() {
  case "$1" in
    1) printf "python -c 'import pty;pty.spawn(\"/bin/bash\")'\n" | _clip_copy ;;
    2) printf "python3 -c 'import pty;pty.spawn(\"/bin/bash\")'\n" | _clip_copy ;;
    *) printf "script -q /dev/null -c /bin/bash\n" | _clip_copy ;;
  esac
  echo "[+] Stabilizing commands copied to clipboard."
  stty raw -echo 2>/dev/null; fg 2>/dev/null
  export TERM=tmux-256color
}

# create folder and cd into it: mcd <dir>
mcd() { mkdir -p -- "$1" && cd -- "$1"; }

# go back by name or depth
# Usage:
#   cdb <dirname>        # jump up to nearest ancestor named <dirname>
#   cdb .. 2             # go up 2 directories
cdb() {
  if [ -z "$1" ]; then
    echo "Usage: cdb <dirname>  OR  cdb .. <levels>" >&2
    return 1
  fi

  if [ "$1" = ".." ]; then
    local depth="${2:-1}"
    local i
    for i in $(seq 1 "$depth"); do cd .. || return 1; done
    return 0
  fi

  local target="$1" here="$PWD"
  while [ "$here" != "/" ]; do
    if [ -d "$here/$target" ]; then
      cd "$here/$target" || return 1
      return 0
    fi
    here="$(dirname "$here")"
  done
  echo "[!] Directory '$target' not found in ancestors." >&2
  return 1
}
